{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ResponsiveContainer, ComposedChart, LineChart, AreaChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from \"recharts\";\nimport useMedia from \"use-media\";\nimport _ from \"lodash\";\nimport styled from \"styled-components\";\nimport { useAuthState } from \"../pages/_app\";\nvar ChartContainer = styled.div.withConfig({\n  displayName: \"activityCharts__ChartContainer\",\n  componentId: \"sc-1skspoo-0\"\n})([\"padding:\", \";background:\", \"};border-radius:\", \";margin:\", \" 0;width:100%;position:relative;\"], function (props) {\n  return props.theme.tokens.spacing.L.value;\n}, function (props) {\n  return props.theme.colors.cardBackground;\n}, function (props) {\n  return props.theme.tokens.borderRadius.value;\n}, function (props) {\n  return props.theme.tokens.spacing.L.value;\n});\nvar displayActivityDistanceUnit;\n\nvar Tick = function Tick(_ref) {\n  var value = _ref.payload.value,\n      verticalAnchor = _ref.verticalAnchor,\n      visibleTicksCount = _ref.visibleTicksCount,\n      rest = _objectWithoutProperties(_ref, [\"payload\", \"verticalAnchor\", \"visibleTicksCount\"]);\n\n  return __jsx(\"text\", _extends({\n    style: {\n      fontSize: \"12px\"\n    }\n  }, rest, {\n    dy: 16\n  }), value, \" \", displayActivityDistanceUnit);\n};\n\nvar CustomTooltipStyled = styled.div.withConfig({\n  displayName: \"activityCharts__CustomTooltipStyled\",\n  componentId: \"sc-1skspoo-1\"\n})([\"background:\", \"};padding:\", \" \", \";box-shadow:0 2px 4px rgba(0,0,0,0.4);border-radius:\", \";p{margin:0;}\"], function (props) {\n  return props.theme.colors.cardBackground;\n}, function (props) {\n  return props.theme.tokens.spacing.S.value;\n}, function (props) {\n  return props.theme.tokens.spacing.M.value;\n}, function (props) {\n  return props.theme.tokens.borderRadius.value;\n});\n\nvar RenderLineChart = function RenderLineChart(props) {\n  var mediaDarkMode = useMedia(\"(prefers-color-scheme: dark)\");\n  var originalArray = props.data;\n  console.log(originalArray);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showHeartrate = _React$useState2[0],\n      setShowHeartrate = _React$useState2[1];\n\n  var _useAuthState = useAuthState(),\n      user = _useAuthState.user;\n\n  displayActivityDistanceUnit = user.measurement_preference == \"meters\" ? \"km\" : \"mi\";\n  var displayActivityTotalElevationGainUnit = user.measurement_preference == \"meters\" ? \"m\" : \"ft\";\n  var displaySpeedUnit = user.measurement_preference == \"meters\" ? \"kph\" : \"mph\"; // distance\n\n  var distance = originalArray.filter(function (item) {\n    return item.type.includes(\"distance\");\n  });\n  var distanceStream = distance[0].data;\n  var distanceInKm = distanceStream.map(function (item) {\n    return _.round(item / 1000, 2);\n  });\n\n  var distanceInMi = _.map(distanceInKm, kmToMiles);\n\n  var displayDistance = user.measurement_preference == \"meters\" ? distanceInKm : distanceInMi;\n  console.log(displayDistance, distanceStream); // Altitude\n\n  var altitudeStream = [];\n  var altitude = originalArray.filter(function (item) {\n    return item.type.includes(\"altitude\");\n  });\n\n  if (altitude.length > 0) {\n    altitudeStream = altitude[0].data;\n  } // heartrate\n\n\n  var heartrateStream = [];\n  var heartrate = originalArray.filter(function (item) {\n    return item.type.includes(\"heartrate\");\n  });\n\n  if (heartrate.length > 0) {\n    heartrateStream = heartrate[0].data;\n  } // speed\n\n\n  var speedStream = [];\n  var speed = originalArray.filter(function (item) {\n    return item.type.includes(\"velocity_smooth\");\n  });\n\n  if (speed.length > 0) {\n    speedStream = speed[0].data;\n  } // Unit conversion function\n\n\n  function toKPH(m) {\n    var toKM = m / 1000;\n    var toKPH = toKM * 60 * 60;\n    return _.round(toKPH, 3);\n  }\n\n  function KPHtoMPH(kph) {\n    var mph = kph * 0.621371;\n    return _.round(mph, 3);\n  }\n\n  function kmToMiles(km) {\n    var mi = km * 0.621371;\n    return _.round(mi, 3);\n  }\n\n  var speedKPH = _.map(speedStream, toKPH);\n\n  var speedMPH = _.map(speedKPH, KPHtoMPH);\n\n  var displaySpeed = user.measurement_preference == \"meters\" ? speedKPH : speedMPH;\n  var formattedData = displayDistance.map(function (distance, index) {\n    return {\n      distance: distance,\n      altitude: altitudeStream[index],\n      heartrate: heartrateStream[index],\n      speed: displaySpeed[index]\n    };\n  });\n\n  var CustomTooltip = function CustomTooltip(props) {\n    var payload = props.payload,\n        label = props.label,\n        active = props.active;\n    var items = payload.map(function (item) {\n      return __jsx(\"p\", {\n        style: {\n          color: item.stroke\n        },\n        key: item.name\n      }, item.name, \": \", item.value, \" \", item.unit);\n    });\n\n    if (active) {\n      return __jsx(CustomTooltipStyled, null, __jsx(\"p\", {\n        style: {\n          opacity: 0.5\n        }\n      }, \"Distance: \", label, \" \", displayActivityDistanceUnit), items);\n    } else {\n      return __jsx(\"div\", null);\n    }\n  };\n\n  console.log(formattedData);\n  return __jsx(ChartContainer, null, __jsx(ResponsiveContainer, {\n    width: \"99%\",\n    height: 200\n  }, __jsx(ComposedChart, {\n    data: formattedData\n  }, __jsx(Tooltip, {\n    content: __jsx(CustomTooltip, null)\n  }), __jsx(CartesianGrid, null), __jsx(XAxis, {\n    tick: __jsx(Tick, null),\n    type: \"number\",\n    domain: [0, \"dataMax\"],\n    interval: \"Number\",\n    allowDecimals: true,\n    dataKey: \"distance\",\n    minTickGap: 20\n  }), __jsx(YAxis, {\n    tick: __jsx(Tick, null),\n    minTickGap: 30,\n    type: \"number\",\n    dataKey: \"altitude\",\n    orientation: \"right\",\n    hide: true\n  }), __jsx(Area, {\n    type: \"monotone\",\n    dataKey: \"altitude\",\n    stroke: mediaDarkMode ? \"#fff\" : \"#000\",\n    unit: displayActivityTotalElevationGainUnit,\n    strokeWidth: 0,\n    dot: false,\n    fill: mediaDarkMode ? \"#fff\" : \"#000\",\n    fillOpacity: 0.2\n  }), showHeartrate ? __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"heartrate\",\n    unit: \"bpm\",\n    stroke: \"#DC524D\",\n    strokeWidth: 1,\n    dot: false\n  }) : null, __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"speed\",\n    unit: displaySpeedUnit,\n    stroke: \"#0085FF\",\n    strokeWidth: 1 // yAxisId=\"left\"\n    ,\n    dot: false\n  }))));\n};\n\nexport default RenderLineChart;","map":null,"metadata":{},"sourceType":"module"}