{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport styled from \"styled-components\";\nimport ActivityMap from \"./map\";\nimport moment from \"moment\";\nimport { motion } from \"framer-motion\";\nimport { whileHover, whileTap } from \"../interactions/cursor\";\nimport { useAuthState } from \"../pages/_app\";\nvar Card = styled(motion.div).withConfig({\n  displayName: \"activity-card__Card\",\n  componentId: \"qtqpkq-0\"\n})([\"background:\", \";height:190px;cursor:pointer;padding:0;border-radius:\", \";width:100%;display:grid;overflow:hidden;grid-template-rows:1fr 1fr;grid-template-columns:190px 1fr;@media (max-width:\", \"){padding:\", \";grid-template-columns:50px 1fr;grid-template-rows:1fr auto;height:auto;}\"], function (props) {\n  return props.theme.colors.cardBackground;\n}, function (props) {\n  return props.theme.tokens.borderRadius.value;\n}, function (props) {\n  return props.theme.tokens.mediaQueries.small;\n}, function (props) {\n  return props.theme.tokens.spacing.M.value;\n});\nvar CardMeta = styled.div.withConfig({\n  displayName: \"activity-card__CardMeta\",\n  componentId: \"qtqpkq-1\"\n})([\"padding:\", \";display:grid;grid-template-rows:minMax(auto,100px) 1fr;width:100%;@media (max-width:\", \"){padding:0;padding-left:\", \";grid-template-rows:auto;}\"], function (props) {\n  return props.theme.tokens.spacing.M.value;\n}, function (props) {\n  return props.theme.tokens.mediaQueries.small;\n}, function (props) {\n  return props.theme.tokens.spacing.L.value;\n});\nvar MetaGroup = styled.div.withConfig({\n  displayName: \"activity-card__MetaGroup\",\n  componentId: \"qtqpkq-2\"\n})([\"display:flex;flex-direction:column;@media (max-width:\", \"){margin-right:\", \";}\"], function (props) {\n  return props.theme.tokens.mediaQueries.small;\n}, function (props) {\n  return props.theme.tokens.spacing.L.value;\n});\nvar MetaHeader = styled.p.withConfig({\n  displayName: \"activity-card__MetaHeader\",\n  componentId: \"qtqpkq-3\"\n})([\"margin-top:0;margin-bottom:3px;\"]);\nvar MetaDescription = styled.p.withConfig({\n  displayName: \"activity-card__MetaDescription\",\n  componentId: \"qtqpkq-4\"\n})([\"opacity:0.5;margin:0;\"]);\nvar MetaRowLarge = styled.div.withConfig({\n  displayName: \"activity-card__MetaRowLarge\",\n  componentId: \"qtqpkq-5\"\n})([\"display:grid;grid-template-columns:1fr 1fr 1fr;align-items:end;grid-column-gap:\", \";@media (max-width:\", \"){display:none;}\"], function (props) {\n  return props.theme.tokens.spacing.M.value;\n}, function (props) {\n  return props.theme.tokens.mediaQueries.small;\n});\nvar MetaRowSmall = styled.div.withConfig({\n  displayName: \"activity-card__MetaRowSmall\",\n  componentId: \"qtqpkq-6\"\n})([\"display:none;padding-top:\", \";@media (max-width:\", \"){display:flex;}\"], function (props) {\n  return props.theme.tokens.spacing.L.value;\n}, function (props) {\n  return props.theme.tokens.mediaQueries.small;\n});\n\nfunction ActivityCard(_ref) {\n  var activity = _ref.activity;\n\n  var _useAuthState = useAuthState(),\n      user = _useAuthState.user; // Rounding helper\n\n\n  function round_to_precision(x, precision) {\n    var y = +x + (precision === undefined ? 0.5 : precision / 2);\n    return y - y % (precision === undefined ? 1 : +precision);\n  }\n\n  var activityStartTime = moment(activity.start_date_local);\n  var friendlyFormat = activityStartTime.format(\"MMM Do YYYY [at] h:mm a\"); // Distance\n\n  var activityDistance = round_to_precision(activity.distance / 1000, 0.5);\n  var activityDistanceImperial = round_to_precision(activity.distance / 1000 * 0.621371, 0.5);\n  var displayActvityDistance = user.measurement_preference == \"meters\" ? activityDistance : activityDistanceImperial;\n  var displayActivityDistanceUnit = user.measurement_preference == \"meters\" ? \"km\" : \"mi\"; // Elevation Gain\n\n  var activityTotalElevationGain = round_to_precision(activity.total_elevation_gain, 0.5);\n  var activityTotalElevationGainImperial = round_to_precision(activity.total_elevation_gain * 3.28084, 0.5);\n  var displayActivityTotalElevationGain = user.measurement_preference == \"meters\" ? activityTotalElevationGain : activityTotalElevationGainImperial;\n  var displayActivityTotalElevationGainUnit = user.measurement_preference == \"meters\" ? \"m\" : \"ft\";\n  var activityMovingTime = moment.duration(activity.moving_time, \"seconds\");\n  var activityMovingTimeHours = activityMovingTime.get(\"hours\");\n  var activityMovingTimeMinutes = activityMovingTime.get(\"minutes\");\n  var activityMovingTimeSeconds = activityMovingTime.get(\"seconds\");\n  return __jsx(Link, {\n    href: \"/activities/[activity]\",\n    as: \"/activities/\".concat(activity.id)\n  }, __jsx(Card, {\n    whileHover: whileHover,\n    whileTap: whileTap\n  }, __jsx(ActivityMap, {\n    type: activity.start_latlng ? \"map\" : \"nomap\",\n    polyline: activity.map.summary_polyline\n  }), __jsx(CardMeta, null, __jsx(MetaGroup, null, __jsx(MetaHeader, null, activity.name), __jsx(MetaDescription, null, friendlyFormat)), __jsx(MetaRowLarge, null, __jsx(MetaGroup, null, __jsx(MetaHeader, null, displayActvityDistance, \" \", displayActivityDistanceUnit), __jsx(MetaDescription, null, \"Distance\")), __jsx(MetaGroup, null, __jsx(MetaHeader, null, activityMovingTimeHours, \":\", activityMovingTimeMinutes, \":\", activityMovingTimeSeconds), __jsx(MetaDescription, null, \"Duration\")), __jsx(MetaGroup, null, __jsx(MetaHeader, null, displayActivityTotalElevationGain, \" \", displayActivityTotalElevationGainUnit), __jsx(MetaDescription, null, \"Elevation\")))), __jsx(MetaRowSmall, null, __jsx(MetaGroup, null, __jsx(MetaHeader, null, activityDistance, \" km\"), __jsx(MetaDescription, null, \"Distance\")), __jsx(MetaGroup, null, __jsx(MetaHeader, null, activityMovingTimeHours, \":\", activityMovingTimeMinutes, \":\", activityMovingTimeSeconds), __jsx(MetaDescription, null, \"Duration\")), __jsx(MetaGroup, null, __jsx(MetaHeader, null, activityTotalElevationGain, \" km\"), __jsx(MetaDescription, null, \"Elevation\")))));\n}\n\nexport default ActivityCard;","map":null,"metadata":{},"sourceType":"module"}