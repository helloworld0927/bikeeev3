{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { ResponsiveContainer, ComposedChart, LineChart, AreaChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from \"recharts\";\nimport useMedia from \"use-media\";\nimport _ from \"lodash\";\nimport styled from \"styled-components\";\nimport { useAuthState } from \"../pages/_app\";\nconst ChartContainer = styled.div.withConfig({\n  displayName: \"activityCharts__ChartContainer\",\n  componentId: \"sc-1skspoo-0\"\n})([\"padding:\", \";background:\", \"};border-radius:\", \";margin:\", \" 0;width:100%;position:relative;\"], props => props.theme.tokens.spacing.L.value, props => props.theme.colors.cardBackground, props => props.theme.tokens.borderRadius.value, props => props.theme.tokens.spacing.L.value);\nlet displayActivityDistanceUnit;\n\nconst Tick = (_ref) => {\n  let {\n    payload: {\n      value\n    },\n    verticalAnchor,\n    visibleTicksCount\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"payload\", \"verticalAnchor\", \"visibleTicksCount\"]);\n\n  return __jsx(\"text\", _extends({\n    style: {\n      fontSize: \"12px\"\n    }\n  }, rest, {\n    dy: 16\n  }), value, \" \", displayActivityDistanceUnit);\n};\n\nconst CustomTooltipStyled = styled.div.withConfig({\n  displayName: \"activityCharts__CustomTooltipStyled\",\n  componentId: \"sc-1skspoo-1\"\n})([\"background:\", \"};padding:\", \" \", \";box-shadow:0 2px 4px rgba(0,0,0,0.4);border-radius:\", \";p{margin:0;}\"], props => props.theme.colors.cardBackground, props => props.theme.tokens.spacing.S.value, props => props.theme.tokens.spacing.M.value, props => props.theme.tokens.borderRadius.value);\n\nconst RenderLineChart = props => {\n  const mediaDarkMode = useMedia(\"(prefers-color-scheme: dark)\");\n  let originalArray = props.data;\n  console.log(originalArray);\n  const [showHeartrate, setShowHeartrate] = React.useState(true);\n  const {\n    user\n  } = useAuthState();\n  displayActivityDistanceUnit = user.measurement_preference == \"meters\" ? \"km\" : \"mi\";\n  let displayActivityTotalElevationGainUnit = user.measurement_preference == \"meters\" ? \"m\" : \"ft\";\n  let displaySpeedUnit = user.measurement_preference == \"meters\" ? \"kph\" : \"mph\"; // distance\n\n  let distance = originalArray.filter(item => {\n    return item.type.includes(\"distance\");\n  });\n  let distanceStream = distance[0].data;\n  let distanceInKm = distanceStream.map(item => {\n    return _.round(item / 1000, 2);\n  });\n\n  let distanceInMi = _.map(distanceInKm, kmToMiles);\n\n  let displayDistance = user.measurement_preference == \"meters\" ? distanceInKm : distanceInMi;\n  console.log(displayDistance, distanceStream); // Altitude\n\n  let altitudeStream = [];\n  let altitude = originalArray.filter(item => {\n    return item.type.includes(\"altitude\");\n  });\n\n  if (altitude.length > 0) {\n    altitudeStream = altitude[0].data;\n  } // heartrate\n\n\n  let heartrateStream = [];\n  let heartrate = originalArray.filter(item => {\n    return item.type.includes(\"heartrate\");\n  });\n\n  if (heartrate.length > 0) {\n    heartrateStream = heartrate[0].data;\n  } // speed\n\n\n  let speedStream = [];\n  let speed = originalArray.filter(item => {\n    return item.type.includes(\"velocity_smooth\");\n  });\n\n  if (speed.length > 0) {\n    speedStream = speed[0].data;\n  } // Unit conversion function\n\n\n  function toKPH(m) {\n    let toKM = m / 1000;\n    let toKPH = toKM * 60 * 60;\n    return _.round(toKPH, 3);\n  }\n\n  function KPHtoMPH(kph) {\n    let mph = kph * 0.621371;\n    return _.round(mph, 3);\n  }\n\n  function kmToMiles(km) {\n    let mi = km * 0.621371;\n    return _.round(mi, 3);\n  }\n\n  let speedKPH = _.map(speedStream, toKPH);\n\n  let speedMPH = _.map(speedKPH, KPHtoMPH);\n\n  let displaySpeed = user.measurement_preference == \"meters\" ? speedKPH : speedMPH;\n  let formattedData = displayDistance.map((distance, index) => ({\n    distance: distance,\n    altitude: altitudeStream[index],\n    heartrate: heartrateStream[index],\n    speed: displaySpeed[index]\n  }));\n\n  const CustomTooltip = props => {\n    const {\n      payload,\n      label,\n      active\n    } = props;\n    let items = payload.map(item => __jsx(\"p\", {\n      style: {\n        color: item.stroke\n      },\n      key: item.name\n    }, item.name, \": \", item.value, \" \", item.unit));\n\n    if (active) {\n      return __jsx(CustomTooltipStyled, null, __jsx(\"p\", {\n        style: {\n          opacity: 0.5\n        }\n      }, \"Distance: \", label, \" \", displayActivityDistanceUnit), items);\n    } else {\n      return __jsx(\"div\", null);\n    }\n  };\n\n  console.log(formattedData);\n  return __jsx(ChartContainer, null, __jsx(ResponsiveContainer, {\n    width: \"99%\",\n    height: 200\n  }, __jsx(ComposedChart, {\n    data: formattedData\n  }, __jsx(Tooltip, {\n    content: __jsx(CustomTooltip, null)\n  }), __jsx(CartesianGrid, null), __jsx(XAxis, {\n    tick: __jsx(Tick, null),\n    type: \"number\",\n    domain: [0, \"dataMax\"],\n    interval: \"Number\",\n    allowDecimals: true,\n    dataKey: \"distance\",\n    minTickGap: 20\n  }), __jsx(YAxis, {\n    tick: __jsx(Tick, null),\n    minTickGap: 30,\n    type: \"number\",\n    dataKey: \"altitude\",\n    orientation: \"right\",\n    hide: true\n  }), __jsx(Area, {\n    type: \"monotone\",\n    dataKey: \"altitude\",\n    stroke: mediaDarkMode ? \"#fff\" : \"#000\",\n    unit: displayActivityTotalElevationGainUnit,\n    strokeWidth: 0,\n    dot: false,\n    fill: mediaDarkMode ? \"#fff\" : \"#000\",\n    fillOpacity: 0.2\n  }), showHeartrate ? __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"heartrate\",\n    unit: \"bpm\",\n    stroke: \"#DC524D\",\n    strokeWidth: 1,\n    dot: false\n  }) : null, __jsx(Line, {\n    type: \"monotone\",\n    dataKey: \"speed\",\n    unit: displaySpeedUnit,\n    stroke: \"#0085FF\",\n    strokeWidth: 1 // yAxisId=\"left\"\n    ,\n    dot: false\n  }))));\n};\n\nexport default RenderLineChart;","map":null,"metadata":{},"sourceType":"module"}